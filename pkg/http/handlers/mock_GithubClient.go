// Code generated by mockery v2.9.4. DO NOT EDIT.

package handlers

import (
	context "context"

	github "github.com/google/go-github/v41/github"
	mock "github.com/stretchr/testify/mock"
)

// MockGithubClient is an autogenerated mock type for the GithubClient type
type MockGithubClient struct {
	mock.Mock
}

// AddLabelsToIssue provides a mock function with given fields: ctx, owner, name, issue, labels
func (_m *MockGithubClient) AddLabelsToIssue(ctx context.Context, owner string, name string, issue int, labels []string) ([]*github.Label, *github.Response, error) {
	ret := _m.Called(ctx, owner, name, issue, labels)

	var r0 []*github.Label
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, []string) []*github.Label); ok {
		r0 = rf(ctx, owner, name, issue, labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Label)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, []string) *github.Response); ok {
		r1 = rf(ctx, owner, name, issue, labels)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int, []string) error); ok {
		r2 = rf(ctx, owner, name, issue, labels)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateIssueComment provides a mock function with given fields: ctx, owner, name, issue, comment
func (_m *MockGithubClient) CreateIssueComment(ctx context.Context, owner string, name string, issue int, comment *github.IssueComment) (*github.IssueComment, *github.Response, error) {
	ret := _m.Called(ctx, owner, name, issue, comment)

	var r0 *github.IssueComment
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, *github.IssueComment) *github.IssueComment); ok {
		r0 = rf(ctx, owner, name, issue, comment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.IssueComment)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, *github.IssueComment) *github.Response); ok {
		r1 = rf(ctx, owner, name, issue, comment)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int, *github.IssueComment) error); ok {
		r2 = rf(ctx, owner, name, issue, comment)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateWorkflowDispatchEventByFileName provides a mock function with given fields: ctx, owner, repo, workflowFileName, event
func (_m *MockGithubClient) CreateWorkflowDispatchEventByFileName(ctx context.Context, owner string, repo string, workflowFileName string, event github.CreateWorkflowDispatchEventRequest) (*github.Response, error) {
	ret := _m.Called(ctx, owner, repo, workflowFileName, event)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, github.CreateWorkflowDispatchEventRequest) *github.Response); ok {
		r0 = rf(ctx, owner, repo, workflowFileName, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, github.CreateWorkflowDispatchEventRequest) error); ok {
		r1 = rf(ctx, owner, repo, workflowFileName, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditIssueComment provides a mock function with given fields: ctx, owner, name, issue, comment
func (_m *MockGithubClient) EditIssueComment(ctx context.Context, owner string, name string, issue int64, comment *github.IssueComment) (*github.IssueComment, *github.Response, error) {
	ret := _m.Called(ctx, owner, name, issue, comment)

	var r0 *github.IssueComment
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, *github.IssueComment) *github.IssueComment); ok {
		r0 = rf(ctx, owner, name, issue, comment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.IssueComment)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, *github.IssueComment) *github.Response); ok {
		r1 = rf(ctx, owner, name, issue, comment)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int64, *github.IssueComment) error); ok {
		r2 = rf(ctx, owner, name, issue, comment)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetFileContent provides a mock function with given fields: ctx, owner, name, path, opt
func (_m *MockGithubClient) GetFileContent(ctx context.Context, owner string, name string, path string, opt *github.RepositoryContentGetOptions) (*github.RepositoryContent, []*github.RepositoryContent, *github.Response, error) {
	ret := _m.Called(ctx, owner, name, path, opt)

	var r0 *github.RepositoryContent
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) *github.RepositoryContent); ok {
		r0 = rf(ctx, owner, name, path, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryContent)
		}
	}

	var r1 []*github.RepositoryContent
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) []*github.RepositoryContent); ok {
		r1 = rf(ctx, owner, name, path, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*github.RepositoryContent)
		}
	}

	var r2 *github.Response
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) *github.Response); ok {
		r2 = rf(ctx, owner, name, path, opt)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*github.Response)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) error); ok {
		r3 = rf(ctx, owner, name, path, opt)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetRepository provides a mock function with given fields: ctx, owner, name
func (_m *MockGithubClient) GetRepository(ctx context.Context, owner string, name string) (*github.Repository, *github.Response, error) {
	ret := _m.Called(ctx, owner, name)

	var r0 *github.Repository
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.Repository); ok {
		r0 = rf(ctx, owner, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Repository)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(ctx, owner, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, owner, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListOrganizationMembers provides a mock function with given fields: ctx, org, opt
func (_m *MockGithubClient) ListOrganizationMembers(ctx context.Context, org string, opt *github.ListMembersOptions) ([]*github.User, *github.Response, error) {
	ret := _m.Called(ctx, org, opt)

	var r0 []*github.User
	if rf, ok := ret.Get(0).(func(context.Context, string, *github.ListMembersOptions) []*github.User); ok {
		r0 = rf(ctx, org, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.User)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, *github.ListMembersOptions) *github.Response); ok {
		r1 = rf(ctx, org, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, *github.ListMembersOptions) error); ok {
		r2 = rf(ctx, org, opt)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MergePullRequest provides a mock function with given fields: ctx, owner, name, issue, commitMessage, opt
func (_m *MockGithubClient) MergePullRequest(ctx context.Context, owner string, name string, issue int, commitMessage string, opt *github.PullRequestOptions) (*github.PullRequestMergeResult, *github.Response, error) {
	ret := _m.Called(ctx, owner, name, issue, commitMessage, opt)

	var r0 *github.PullRequestMergeResult
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, string, *github.PullRequestOptions) *github.PullRequestMergeResult); ok {
		r0 = rf(ctx, owner, name, issue, commitMessage, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.PullRequestMergeResult)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, string, *github.PullRequestOptions) *github.Response); ok {
		r1 = rf(ctx, owner, name, issue, commitMessage, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int, string, *github.PullRequestOptions) error); ok {
		r2 = rf(ctx, owner, name, issue, commitMessage, opt)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
